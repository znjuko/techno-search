Уровень Delivery необходимо (все вызовы, которые могут вернуть exception)
обложить конструкция try catch, которые бы определяли результат обработки конкретного функционала

Например: Когда UseCase реализует покладку в БД, БД может вернуть Exception о том, что покладка зафейлилась - для этого на уровне Delivery мы обкладываем вызов логики UseCase вышеописанной конструкцией и в случае хэндлинга ошибки мы записываем ответ через ErrorResponseWriter.
(можно просто записать тело полученного exception, для того чтобы упростить наш дебаггинг)

(Пример работы с обработкой ошибок можно посмотреть в ветке skill-service по пути src/skill_service/delivery)

Покладка матрицы смежонсти должна производиться исходя из описанной тобой задачей (по-моему SEAR-23 у нее)
Коллекция для покладки должна называться store_graph.
Пример работы с MongoDB ты можешь найти в ветке mapgraph-service-facade
по пути: src/map-service/path/storage (там немного функционала написано, но думаю что достаточно чтобы понять основные прицнипы работы с монгой)
Если будут какие-то вопросы - обращайся ;)

Примерную логику, которую тебе надо написать можешь посмотреть ниже в картиночке:
Выделено 3 уровня Delivery/Usecase/Storage - это РАЗНЫЕ классы, которые агрегируют друг друга, относительно последовательности вызовов
Delivery занимается парсингом запроса и валидацией, затем передает полученный запрос на уровень Usecase, который выполняет всю бизнесс-логику
Delivery занимается хэндлингом exception и в случае какой-то ошибки - пишет ее в REsponse и заканчивает обработку.
